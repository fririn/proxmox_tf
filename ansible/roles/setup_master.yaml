- name: Setup k8s master nodes
  hosts: masters
  become: yes
  vars:
    pod_network_cidr: "10.244.0.0/16"
    service_cidr: "10.96.0.0/12"
    api_server_port: "6443"
  
  tasks:
    - name: Check if k8s is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf

    # - name: Validate vars before init
    #   assert:
    #     that:
    #       - "'{{ ansible_host }}' != ''"
    #       - "'{{ inventory_hostname }}' != ''"
    #       - "'{{ pod_network_cidr }}' != ''"
    #       - "'{{ service_cidr }}' != ''"
    #     fail_msg: "One or more required variables are missing"

    - name: Initialize k8s
      command: >
        kubeadm init
          --pod-network-cidr={{ pod_network_cidr }} 
          --apiserver-advertise-address={{ ansible_host }} 
          --node-name={{ inventory_hostname }}
#          --service-cidr={{ service_cidr }} \
#          --apiserver-bind-port={{ api_server_port }} \
      when: not k8s_admin_conf.stat.exists
      register: kubeadm_init_result
######################################################################################

    - name: Display kubeadm init output
      debug:
        var: kubeadm_init_result.stdout_lines
      when: kubeadm_init_result is defined and kubeadm_init_result.stdout_lines is defined

    - name: Create .kube directory for ansible_user user
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0700'

    - name: Copy admin config to ansible_user 
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        directory_mode: '0700'
        remote_src: yes

    - name: Download kubeconfig locally
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config-remote
        flat: yes
      run_once: true

    - name: Generate join command for worker nodes
      shell: kubeadm token create --print-join-command
      register: join_command_output

    - name: Save join command to local file
      become: false
      copy:
        content: "{{ join_command_output.stdout }}"
        dest: "{{ playbook_dir }}/join-command.txt"
        mode: '0600'
      delegate_to: localhost
      when: join_command_output.stdout is defined

    # - name: Install Flannel CNI network plugin
    #   become_user: "{{ ansible_user }}"
    #   shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    #   environment:
    #     KUBECONFIG: /home/"{{ ansible_user }}"/.kube/config
    #   retries: 3
    #   delay: 10
    #
    - name: Wait for API server (up to 5 minutes)
      command: kubectl get --raw='/readyz?verbose'
      register: api_check
      until: "'readyz check passed' in api_check.stdout"
      retries: 60
      delay: 5
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      changed_when: false
      
# #####################################################################################
#     - name: Install Helm
#       command: |
#         curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
#       args:
#         creates: /usr/local/bin/helm
#
#     - name: Install Cilium via Helm
#       command: |
#         helm upgrade --install cilium cilium/cilium \
#           --namespace kube-system \
#           --version 1.15.0 \
#           --set operator.replicas=1 \
#           --set kubeProxyReplacement=strict \
#           --set hubble.relay.enabled=true \
#           --set hubble.ui.enabled=true
#       environment:
#         KUBECONFIG: /etc/kubernetes/admin.conf
# ######################################################################################
    #
    # - name: Wait for system pods to be ready
    #   become_user: "{{ ansible_user }}"
    #   shell: kubectl get pods -n kube-system --no-headers | grep -v Running | grep -v Completed | wc -l
    #   register: pending_pods
    #   until: pending_pods.stdout == "0"
    #   retries: 20
    #   delay: 15
    #   environment:
    #     KUBECONFIG: /home/"{{ ansible_user }}"/.kube/config

    - name: Display master node status
      become_user: "{{ ansible_user }}"
      shell: kubectl get nodes {{ inventory_hostname }}
      register: master_status
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config

    - name: Show master node information
      debug:
        msg: "{{ master_status.stdout_lines }}"
